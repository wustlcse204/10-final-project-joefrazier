{"version":3,"sources":["firebase.js","components/SignIn.js","components/SignOut.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","onClickHandlerLogin","provider","GithubAuthProvider","addScope","signInWithPopup","then","result","token","credential","accessToken","console","log","user","catch","error","errorCode","code","message","email","alert","SignIn","onClickHandler","event","a","className","type","id","onClick","value","SignOut","signOut","App","props","state","isLoggedIn","this","onAuthStateChanged","userAuth","JSON","stringify","currentUser","setState","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAgBAA,IAASC,cAZc,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAMF,IAAMC,EAAOT,IAASS,OACJT,IAASU,YAG3B,SAASC,IACd,IAAIC,EAAW,IAAIZ,IAASS,KAAKI,mBAEjCD,EAASE,SAAS,QAElBd,IAASS,OAAOM,gBAAgBH,GAAUI,MAAK,SAAUC,GACvD,IAAIC,EAAQD,EAAOE,WAAWC,YAC9BC,QAAQC,IAAIJ,GACDD,EAAOM,QACjBC,OAAM,SAAUC,GACjB,IAAIC,EAAYD,EAAME,KACHF,EAAMG,QAEbH,EAAMI,MAEDJ,EAAMN,WAEL,kDAAdO,EACFI,MAAM,6EAINT,QAAQI,MAAMA,M,2BCzBLM,EAbA,WACX,IAAMC,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACnBvB,IADmB,2CAAH,sDAIpB,OACI,yBAAKwB,UAAU,mBACX,8CACA,2BAAOC,KAAK,SAASD,UAAU,cAAcE,GAAG,YAAYC,QAAS,SAACL,GAAD,OAAUD,EAAeC,IAAQM,MAAM,wBCCzGC,EAXC,WACZ,IAAMR,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDF8CzBlC,IAASS,OAAOgC,UAAUzB,MAAK,eAE5BQ,OAAM,SAASC,OEhDO,2CAAH,sDAGpB,OACI,yBAAKU,UAAU,mBACX,2BAAOC,KAAK,SAASD,UAAU,cAAcE,GAAG,YAAYC,QAAS,SAACL,GAAD,OAAUD,EAAeC,IAAQM,MAAM,aCsCzGG,E,kDAxCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAY,GAHG,E,qDAQjB,OAAKC,KAAKF,MAAMC,WASZ,yBAAKV,UAAU,OACb,gDACA,kBAAC,EAAD,OATF,yBAAKA,UAAU,OACb,kBAAC,EAAD,S,0CAea,IAAD,OAClB1B,EAAKsC,oBAAmB,SAAAC,GACtBlB,MAAMmB,KAAKC,UAAUF,IACG,MAApBvC,EAAK0C,YACP,EAAKC,SAAS,CAAEP,YAAY,IAG5B,EAAKO,SAAS,CAAEP,YAAY,W,GAlClBQ,aCAlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a46854b0.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCqef48hVI-52yHHE5ZdVIpXtEIQFoie_Y\",\n  authDomain: \"git-social-v1.firebaseapp.com\",\n  databaseURL: \"https://git-social-v1.firebaseio.com\",\n  projectId: \"git-social-v1\",\n  storageBucket: \"git-social-v1.appspot.com\",\n  messagingSenderId: \"979995074373\",\n  appId: \"1:979995074373:web:a47830151a144caccea82c\"\n};\n\n\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n\nexport function onClickHandlerLogin() {\n  var provider = new firebase.auth.GithubAuthProvider();\n\n  provider.addScope('repo');\n\n  firebase.auth().signInWithPopup(provider).then(function (result) {\n    var token = result.credential.accessToken;\n    console.log(token);\n    var user = result.user;\n  }).catch(function (error) {\n    var errorCode = error.code;\n    var errorMessage = error.message;\n\n    var email = error.email;\n\n    var credential = error.credential;\n\n    if (errorCode === 'auth/account-exists-with-different-credential') {\n      alert('You have already signed up with a different auth provider for that email.');\n      // If you are using multiple auth providers on your app you should handle linking\n      // the user's accounts here.\n    } else {\n      console.error(error);\n    }\n  });\n\n}\n\nexport function onClickHandlerLogout() {\n  firebase.auth().signOut().then(function() {\n    // Sign-out successful.\n  }).catch(function(error) {\n    // An error happened.\n  });\n}\n","import React, {useState} from 'react'\nimport {onClickHandlerLogin} from '../firebase.js'\n\n\n\nconst SignIn = () => {\n    const onClickHandler = async (event) => {\n        onClickHandlerLogin();  \n        \n    }\n    return(\n        <div className=\"login-container\">\n            <h2>Login/Register</h2>\n            <input type=\"button\" className=\"login-input\" id=\"login-btn\" onClick={(event)=> onClickHandler(event)} value=\"Login with GitHub\" />\n        </div>\n    );\n\n};\nexport default SignIn;","import React, {useState} from 'react'\nimport {onClickHandlerLogout} from '../firebase.js'\n\nconst SignOut = () => {\n    const onClickHandler = async (event) => {\n        onClickHandlerLogout();  \n    }\n    return(\n        <div className=\"login-container\">\n            <input type=\"button\" className=\"login-input\" id=\"login-btn\" onClick={(event)=> onClickHandler(event)} value=\"Logout\" />\n        </div>\n    );\n\n};\nexport default SignOut;","import React, { Component } from 'react';\nimport './App.css';\nimport { auth } from \"./firebase\"\nimport SignIn from './components/SignIn';\nimport SignOut from './components/SignOut';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false\n    }\n  }\n\n  render() {\n    if (!this.state.isLoggedIn) {\n      return (\n        <div className=\"App\">\n          <SignIn />\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"App\">\n          <div> User Logged in</div>\n          <SignOut />\n        </div>\n      );\n\n    }\n\n  }\n  componentDidMount() {\n    auth.onAuthStateChanged(userAuth => {\n      alert(JSON.stringify(userAuth));\n      if (auth.currentUser != null) {\n        this.setState({ isLoggedIn: true });\n      }\n      else {\n        this.setState({ isLoggedIn: false });\n      }\n\n    })\n  }\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}